package projectTimer.projectData;

import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import projectTimer.Controller;
import projectTimer.ProjectAccordionController;

import javax.xml.stream.XMLEventFactory;
import javax.xml.stream.XMLEventReader;
import javax.xml.stream.XMLEventWriter;
import javax.xml.stream.XMLInputFactory;
import javax.xml.stream.XMLOutputFactory;
import javax.xml.stream.XMLStreamException;
import javax.xml.stream.events.Characters;
import javax.xml.stream.events.EndElement;
import javax.xml.stream.events.StartDocument;
import javax.xml.stream.events.StartElement;
import javax.xml.stream.events.XMLEvent;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.util.LinkedList;
import java.util.ListIterator;

// THIS DATA WAS COPIED IN FROM COURSE RESOURCES.


public class ProjectData {

    private static final String PROJECTS_FILE = "projects.xml";

    private static final String PROJECT = "project";
    private static final String PROJECT_NAME = "project_name";
    private static final Double MINUTES_SPENT = 0.00;
    private static final Double PRICE_QUOTED = 0.00;


    private ObservableList<Project> projects;
    public int projectListIndex;

    public ProjectData() {
        // *** initialize the contacts list here ***
        projects = FXCollections.observableArrayList();
    }

    // *** Add methods to add/delete/access contacts here ***
    public ObservableList<Project> getProjects() {
        return projects;
    }

    public void addProject (Project newProject){
        addInOrder(projects, newProject);
//        projects.add(newProject);
    }

    private  boolean addInOrder (ObservableList<Project> linkedList, Project newProject) {

        ListIterator<Project> projectListIterator = linkedList.listIterator(); // it is important to understand!! this code is just making the iterator. not telling it to do anything yet.

        while (projectListIterator.hasNext()) { // this is telling the iterator to go somewhere.
            int comparison = projectListIterator.next().getName().compareTo(newProject.getName()); // .compareTo transforms the names to numbers...
            // and compares the two. (a minus b maybe) = number
            if (comparison == 0) { // if the int number generated by .compareTo == 0
                // equal, do not add
                System.out.println(newProject + " is already added as a project name");
                return false;
            } else if (comparison > 0) {
                // newCity should appear before this one.
                // Brisbane - > Adelaide
                projectListIterator.previous(); // previous tells the list to go item before this one and add it.
//                projectListIndex = projectListIterator.previousIndex()+1;
                projectListIterator.add(newProject);
                projectListIndex = projects.indexOf(newProject);
                return true;
            } else if (comparison < 0) {
                // move on to the next city.
            }

        }
//        projectListIndex = projectListIterator.nextIndex()-1;
        projectListIterator.add(newProject); // if the while loop determined that no positional changes were needed.
        projectListIndex = projects.indexOf(newProject);
        // Then just add the newCity at the end.
        return true;
    }

    public void deleteProject(Project projectName){
        projects.remove(projectName);
    }

    public void loadProjects() {
        try {
            // First, create a new XMLInputFactory
            XMLInputFactory inputFactory = XMLInputFactory.newInstance();
            // Setup a new eventReader
            InputStream in = new FileInputStream(PROJECTS_FILE);
            XMLEventReader eventReader = inputFactory.createXMLEventReader(in);
            // read the XML document
            Project project = null;

            while (eventReader.hasNext()) {
                XMLEvent event = eventReader.nextEvent();

                if (event.isStartElement()) {
                    StartElement startElement = event.asStartElement();
//                    System.out.println(startElement.getName().getLocalPart().equals(MINUTES_SPENT));
                    // If we have a project item, we create a new project
                    if (startElement.getName().getLocalPart().equals(PROJECT)) {
                        project = new Project(PROJECT_NAME, MINUTES_SPENT, PRICE_QUOTED);
                        continue;
                    }

                    if (event.isStartElement()) {
                        if (event.asStartElement().getName().getLocalPart()
                                .equals(PROJECT_NAME)) {
                            event = eventReader.nextEvent();
                            project.setName(event.asCharacters().getData());
                            //  System.out.println(project.getName()); // This WORKS
                            continue;
                        }
                    }
                    if (event.asStartElement().getName().getLocalPart()
                            .equals("minutes_spent")){
                        event = eventReader.nextEvent();
                        project.setMinutesSpent(Double.parseDouble(event.asCharacters().getData()));
                        // System.out.println(project.getMinutesSpent()); THIS WORKS
                        continue;
                    }


                    if (event.asStartElement().getName().getLocalPart()
                            .equals("price_quoted")) {
                        event = eventReader.nextEvent();
                        project.setQuotedPrice(Double.valueOf(event.asCharacters().getData()));
                        //  System.out.println(project.getQuotedPrice()); // This Works
                        continue;
                    }
                }

                // If we reach the end of a contact element, we add it to the list
                if (event.isEndElement()) {
                    EndElement endElement = event.asEndElement();
                    if (endElement.getName().getLocalPart().equals(PROJECT)) {
                        projects.add(project);
                    }
                }
            }
        }
        catch (FileNotFoundException e) {
            //e.printStackTrace();
        }
        catch (XMLStreamException e) {
            e.printStackTrace();
        }
    }


    public void saveProjects() {

        try {
            // create an XMLOutputFactory
            XMLOutputFactory outputFactory = XMLOutputFactory.newInstance();
            // create XMLEventWriter
            XMLEventWriter eventWriter = outputFactory
                    .createXMLEventWriter(new FileOutputStream(PROJECTS_FILE));
            // create an EventFactory
            XMLEventFactory eventFactory = XMLEventFactory.newInstance();
            XMLEvent end = eventFactory.createDTD("\n");
            // create and write Start Tag
            StartDocument startDocument = eventFactory.createStartDocument();
            eventWriter.add(startDocument);
            eventWriter.add(end);

            StartElement contactsStartElement = eventFactory.createStartElement("",
                    "", "projects");
            eventWriter.add(contactsStartElement);
            eventWriter.add(end);

            for (Project project: projects) {
                saveProject(eventWriter, eventFactory, project);
            }

            eventWriter.add(eventFactory.createEndElement("", "", "contacts"));
            eventWriter.add(end);
            eventWriter.add(eventFactory.createEndDocument());
            eventWriter.close();
        }
        catch (FileNotFoundException e) {
            System.out.println("Problem with Projects file: " + e.getMessage());
            e.printStackTrace();
        }
        catch (XMLStreamException e) {
            System.out.println("Problem writing project: " + e.getMessage());
            e.printStackTrace();
        }
    }

    public void saveProject(XMLEventWriter eventWriter, XMLEventFactory eventFactory, Project project)
            throws FileNotFoundException, XMLStreamException {

        XMLEvent end = eventFactory.createDTD("\n");

        // create contact open tag
        StartElement configStartElement = eventFactory.createStartElement("",
                "", PROJECT);
        eventWriter.add(configStartElement);
        eventWriter.add(end);
        // Write the different nodes
        createNode(eventWriter, PROJECT_NAME, project.getName());
        createNodeInteger(eventWriter, "minutes_spent", (int) project.getMinutesSpent());
        createNode(eventWriter, "price_quoted", String.valueOf(project.getQuotedPrice()));


        eventWriter.add(eventFactory.createEndElement("", "", PROJECT));
        eventWriter.add(end);
    }

    private void createNodeInteger(XMLEventWriter eventWriter, String name,
                                   Integer value) throws XMLStreamException {

        XMLEventFactory eventFactory = XMLEventFactory.newInstance();
        XMLEvent end = eventFactory.createDTD("\n");
        XMLEvent tab = eventFactory.createDTD("\t");
        // create Start node
        StartElement sElement = eventFactory.createStartElement("", "", name);
        eventWriter.add(tab);
        eventWriter.add(sElement);
        // create Content
        Characters ints = eventFactory.createCharacters(String.valueOf(value));
        eventWriter.add(ints);
        // create End node
        EndElement eElement = eventFactory.createEndElement("", "", name);
        eventWriter.add(eElement);
        eventWriter.add(end);
    }

    private void createNode(XMLEventWriter eventWriter, String name,
                            String value) throws XMLStreamException {

        XMLEventFactory eventFactory = XMLEventFactory.newInstance();
        XMLEvent end = eventFactory.createDTD("\n");
        XMLEvent tab = eventFactory.createDTD("\t");
        // create Start node
        StartElement sElement = eventFactory.createStartElement("", "", name);
        eventWriter.add(tab);
        eventWriter.add(sElement);
        // create Content
        Characters characters = eventFactory.createCharacters(value);
        eventWriter.add(characters);
        // create End node
        EndElement eElement = eventFactory.createEndElement("", "", name);
        eventWriter.add(eElement);
        eventWriter.add(end);
    }

    public void printProjectList (){
        for (int i = 0; i < projects.size(); i++){
            System.out.println("Index of project " + i);
            System.out.println("Project name : " + projects.get(i).getName());
            System.out.println("Minutes Spent : " + projects.get(i).getMinutesSpent());
            System.out.println("Price Quoted : £" + projects.get(i).getQuotedPrice());
            System.out.println();
            System.out.println(" - - - - - ");
        }
    }

}

